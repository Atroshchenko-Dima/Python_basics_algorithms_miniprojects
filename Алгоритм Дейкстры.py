graph = {} # сначала необходимо реализовать граф, создаем хеш таблицу

graph["start"] = {} # для того чтобы узнать веса ребер создаем еще одну хеш таблицу
graph["start"]["a"] = 6 # вес ребра "а"
graph["start"]["b"] = 2

graph["a"] = {} # включаем в граф остальные узлы и их соседей
graph["a"]["fin"] = 1 #  расстояние от а до конечного узла
graph["b"] = {}
graph["b"]["a"] = 3 #  расстояние от "б" до "а"
graph["b"]["fin"] = 5
graph["fin"] = {}  # у конечного узла нет соседей

infinity = float("inf") # т.к мы не знаем сколько времени потребуется для достижения конечного узла 
# стоимость считается бесконечной
costs = {}  #  хеш таблица для хранения стоимостей всех узлов
costs["a"] = 6
costs["b"] = 2
costs["fin"] = infinity

parents = {} # создаем хеш таблицу для родителей
parents["a"] = "start"
parents["b"] = "start"
parents["in"] = None

processed = [] # создаем массив для отслеживания всех уже обратонных узлов, один узел не должен 
# обрабатываться многократно

node = find_lowest_cost_node # найти узел с наименьшей стоимостью среди необработанных
while node is not None: # если обработаны все узлы цикл завершен
    cost = costs[node]
    neighbors = graph[node]
    for n in neighbors.keys(): # Перебрать всех соседей текущего узла
        new_cost = cost + neighbors[n]
        if costs[n] > new_cost: #  если к соседу можно быстрее добраться через текущий узел
            costs[n] = new_cost # обновить стоимость для этого узла
            parents[n] = node # этот узел становиться новым родителем для этого соседа
    processed.append(node) # узел помечается как обработанный(добавляется в сосданыый массив)
    node = find_lowest_cost_node(costs) # найти следующий узел для обработки и повторить цикл
